#Использовать tempfiles

Перем ПутьКЛогамПрокси;

Перем Лог;

Процедура ПриСозданииОбъекта(пПутьКЛогамПрокси) Экспорт

	Лог = ПараметрыПриложения.Лог();

	ПутьКЛогамПрокси = пПутьКЛогамПрокси;

КонецПроцедуры

Функция ОбработатьЛоги() Экспорт

	ВременныеКопииЛогов = СкопироватьЛогиВоВременныйКаталог(ПутьКЛогамПрокси);
	КоллекцияЗаписейЛогов = ОбъединитьЛоги(ВременныеКопииЛогов);
	ДанныеЗамеров = ИзвлечьДанныеЗамеров(КоллекцияЗаписейЛогов);
	
	Возврат ДанныеЗамеров;

КонецФункции

Функция СкопироватьЛогиВоВременныйКаталог(ПутьКЛогамПрокси)

	ЛогиДляКопирования = НайтиФайлы(ПутьКЛогамПрокси, "*.log");
	
	ВременныеКопииЛога = Новый Массив();

	Для Каждого КопируемыйФайл Из ЛогиДляКопирования Цикл
		ИмяВременнойКопииЛога = ПолучитьИмяВременногоФайла("log");
		ВременныеКопииЛога.Добавить(ИмяВременнойКопииЛога);

		КопироватьФайл(КопируемыйФайл.ПолноеИмя, ИмяВременнойКопииЛога);
	КонецЦикла;

	Возврат ВременныеКопииЛога;

КонецФункции

Функция ОбъединитьЛоги(ВременныеКопииЛогов)

	ЗаписиЛога = Новый Массив();

	Для Каждого КопияЛога Из ВременныеКопииЛогов Цикл

		ЧтениеТекста = Новый ЧтениеТекста(КопияЛога);
		ДанныеЗамеровМодуля = "";
		
		Пока ДанныеЗамеровМодуля <> Неопределено Цикл
			
			ДанныеЗамеровМодуля = ЧтениеТекста.ПрочитатьСтроку();
			
			Если Не ЗначениеЗаполнено(ДанныеЗамеровМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписиЛога.Добавить(ДанныеЗамеровМодуля);
			
		КонецЦикла;

		ЧтениеТекста.Закрыть();

	КонецЦикла;
	
	Возврат ЗаписиЛога;

КонецФункции

Функция ИзвлечьДанныеЗамеров(КоллекцияЗаписейЛогов)

	ДанныеЗамеров = Новый Массив;

	Для Каждого ЗаписьЛога Из КоллекцияЗаписейЛогов Цикл

			ЗаписьЛогаJSON = ПреобразоватьЗаписьЛогаВJSON(ЗаписьЛога);

			Попытка
				ДанныеЗамеровИзЗаписиЛога = ЗаписьЛогаJSON.request.commandToDbgServer.measure.moduleData;
				ДанныеЗамеров.Добавить(ДанныеЗамеровИзЗаписиЛога);
			Исключение
				Лог.Отладка("Запись лога не валидна, отсутствуют необходимые ключи");
			КонецПопытки;
			
	КонецЦикла;
	
	Возврат ДанныеЗамеров;

КонецФункции

Функция ПреобразоватьЗаписьЛогаВJSON(Знач ДанныеМодуляЛога)

	ДанныеМодуляЛога = СтрЗаменить(ДанныеМодуляЛога, "xmlns:", "");
	ДанныеМодуляЛога = СтрЗаменить(ДанныеМодуляЛога, "dbgtgtRemoteRequestResponse:", "");
	ДанныеМодуляЛога = СтрЗаменить(ДанныеМодуляЛога, "xsi:", "");
	ДанныеМодуляЛога = СтрЗаменить(ДанныеМодуляЛога, "d2p1:", "");
	ДанныеМодуляЛога = СтрЗаменить(ДанныеМодуляЛога, "debugMeasure:", "");

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ДанныеМодуляЛога);
	ДанныеМодуляЛогаJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеМодуляЛогаJSON;
	
КонецФункции

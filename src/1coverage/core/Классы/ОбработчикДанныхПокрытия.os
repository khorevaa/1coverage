#Использовать xml-parser

Перем ПутьКИсходномуКоду;

Перем ТипыМодулей;
Перем ВидыОбъектовМетаданныхСМодулями;
Перем ДанныеПокрытия;

Перем Лог;

Процедура ПриСозданииОбъекта(пПутьКИсходномуКоду) Экспорт

	Лог = ПараметрыПриложения.Лог();

	ПутьКИсходномуКоду = пПутьКИсходномуКоду;

	ТипыМодулей = Новый Соответствие();
	ТипыМодулей.Вставить("МодульОбъекта", "a637f77f-3840-441d-a1c3-699c8c5cb7e0");
	ТипыМодулей.Вставить("МодульМенеджера", "d1b64a2c-8078-4982-8190-8f81aefda192");
	ТипыМодулей.Вставить("ОбщийМодуль", "d5963243-262e-4398-b4d7-fb16d06484f6");
	ТипыМодулей.Вставить("МодульФормы", "32e087ab-1491-49b6-aba7-43571b41ac2b");
	ТипыМодулей.Вставить("МодульСеанса", "9b7bbbae-9771-46f2-9e4d-2489e0ffc702");
	ТипыМодулей.Вставить("МодульУправляемогоПриложения", "d22e852a-cf8a-4f77-8ccb-3548e7792bea");
	ТипыМодулей.Вставить("МодульКоманды", "078a6af8-d22c-4248-9c33-7e90075a3d2c");
	ТипыМодулей.Вставить("МодульНабораЗаписей", "9f36fd70-4bf4-47f6-b235-935f73aab43f");
	ТипыМодулей.Вставить("НеизвестныйМодуль", "0c8cad23-bf8c-468e-b49e-12f1927c048b");

	ВидыОбъектовМетаданныхСМодулями = ВидыОбъектовМетаданныхСМодулями();

КонецПроцедуры

Процедура ЗаполнитьДанныеПокрытия(пДанныеПокрытия) Экспорт

	ДанныеПокрытия = пДанныеПокрытия;

	ФорматВыгрузкиXML = ОпределитьФорматИсходногоКода(ПутьКИсходномуКоду);

	Если ФорматВыгрузкиXML Тогда
		ОпределитьОбъектыКонфигурацииXML();
		ПостроитьПутиКМодулямКонфигурацииXML();
	Иначе
		ОпределитьОбъектыКонфигурацииEDT();
		ПостроитьПутиКМодулямКонфигурацииEDT();
	КонецЕсли;

КонецПроцедуры

Функция ОпределитьФорматИсходногоКода(ПутьКИсходномуКоду)

	ПутьКФайлуКонфигурации = ОбъединитьПути(ПутьКИсходномуКоду, "ConfigDumpInfo.xml");
	ПутьКФайлуКонфигурацииEDT = ОбъединитьПути(ПутьКИсходномуКоду, "src", "Configuration", "Configuration.mdo");
	
	Если ФС.ФайлСуществует(ПутьКФайлуКонфигурации) Тогда
		
		Лог.Отладка("Конфигурация в формате XML");
		Возврат Истина;
		
	ИначеЕсли ФС.ФайлСуществует(ПутьКФайлуКонфигурацииEDT) Тогда
		
		Лог.Отладка("Конфигурация в формате EDT");
		Возврат Ложь;
		
	Иначе
		
		ВызватьИсключение("Не найден исходный код конфигурации или он выгружен в неизвестном формате");
		
	КонецЕсли;

КонецФункции

Процедура ОпределитьОбъектыКонфигурацииXML()
	
	АбсолютныйПутьКИсходномуКоду = Новый Файл(ПутьКИсходномуКоду).ПолноеИмя;
	
	ФайлыКонфигурации = НайтиФайлы(АбсолютныйПутьКИсходномуКоду, "*.xml", Истина);
	
	Для Каждого ФайлКонфигурации Из ФайлыКонфигурации Цикл
		
		ПолныйПутьКОбъекту = ОбъединитьПути(ФайлКонфигурации.Путь, ФайлКонфигурации.ИмяБезРасширения);
		ПутьКОбъекту = ФС.ОтносительныйПуть(АбсолютныйПутьКИсходномуКоду, ПолныйПутьКОбъекту);
		
		ПутьКФайлу = ФайлКонфигурации.ПолноеИмя;

		ОбъектМетаданныхXML = ВыделитьОбъектМетаданныхXML(ПутьКФайлу);

		Если ОбъектМетаданныхXML = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		UUIDОбъекта = ОпределитьUUIDОбъекта(ОбъектМетаданныхXML);
		ЗаписатьОбъектВДанныеПокрытия(UUIDОбъекта, "", ПутьКОбъекту);

		ОбработатьКомандыОбъектаXML(ОбъектМетаданныхXML, ПутьКОбъекту);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПостроитьПутиКМодулямКонфигурацииXML()
	
	Для Каждого Модуль Из ДанныеПокрытия Цикл
		
		Если Не ЗначениеЗаполнено(Модуль.ПутьКОбъекту) Тогда
			Лог.Отладка("Не удалось определить объект с Id модуля " + Модуль.ИдОбъекта);
			Продолжить;
		КонецЕсли;

		ПутьКМодулю = "";
		Если Модуль.ИдТипаМодуля = ТипыМодулей["МодульОбъекта"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "ObjectModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульМенеджера"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "ManagerModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["ОбщийМодуль"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "Module.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульФормы"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "Form", "Module.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульСеанса"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "SessionModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульУправляемогоПриложения"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "ManagedApplicationModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульКоманды"] Тогда
			ЭтоОбщаяКоманда = СтрНайти(Модуль.ПутьКОбъекту, "CommonCommands");
			Если ЭтоОбщаяКоманда Тогда
				ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "CommandModule.bsl");
			Иначе
				ПутьККоманде = ОбъединитьПути(Модуль.ПутьКОбъекту, "Commands", Модуль.ИмяКоманды);
				ПутьКМодулю = ОбъединитьПути(ПутьККоманде, "Ext", "CommandModule.bsl");
			КонецЕсли;
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульНабораЗаписей"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Ext", "RecordSetModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["НеизвестныйМодуль"] Тогда
			Лог.Ошибка("Not implemented exception"); // TODO
		Иначе
			Лог.Отладка("Неизвестный идентификатор типа модуля " + Модуль.ИдТипаМодуля);
		КонецЕсли;

		Модуль.ПутьКМодулю = СтрЗаменить(ПутьКМодулю, "\", "/");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьОбъектыКонфигурацииEDT()
	
	АбсолютныйПутьКИсходномуКоду = Новый Файл(ПутьКИсходномуКоду).ПолноеИмя;
	
	ФайлыКонфигурации = НайтиФайлы(АбсолютныйПутьКИсходномуКоду, "*.mdo", Истина);
	
	Для Каждого ФайлКонфигурации Из ФайлыКонфигурации Цикл
		
		ПутьКОбъекту = ФС.ОтносительныйПуть(АбсолютныйПутьКИсходномуКоду, ФайлКонфигурации.Путь);
		
		ПутьКФайлу = ФайлКонфигурации.ПолноеИмя;

		ОбъектМетаданных = ВыделитьОбъектМетаданныхEDT(ПутьКФайлу);

		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		UUIDОбъекта = ОпределитьUUIDОбъекта(ОбъектМетаданных);
		ЗаписатьОбъектВДанныеПокрытия(UUIDОбъекта, "", ПутьКОбъекту);

		ОбработатьКомандыОбъектаEDT(ОбъектМетаданных, ПутьКОбъекту);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПостроитьПутиКМодулямКонфигурацииEDT()
	
	Для Каждого Модуль Из ДанныеПокрытия Цикл
		
		Если Не ЗначениеЗаполнено(Модуль.ПутьКОбъекту) Тогда
			Лог.Отладка("Не удалось определить объект с Id " + Модуль.ИдОбъекта);
			Продолжить;
		КонецЕсли;

		ПутьКМодулю = "";
		Если Модуль.ИдТипаМодуля = ТипыМодулей["МодульОбъекта"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "ObjectModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульМенеджера"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "ManagerModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["ОбщийМодуль"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Module.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульФормы"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "Forms", Модуль.ИмяФормы, "Module.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульСеанса"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "SessionModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульУправляемогоПриложения"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "ManagedApplicationModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульКоманды"] Тогда
			ЭтоОбщаяКоманда = СтрНайти(Модуль.ПутьКОбъекту, "CommonCommands");
			Если ЭтоОбщаяКоманда Тогда
				ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "CommandModule.bsl");
			Иначе
				ПутьККоманде = ОбъединитьПути(Модуль.ПутьКОбъекту, "Commands", Модуль.ИмяКоманды);
				ПутьКМодулю = ОбъединитьПути(ПутьККоманде, "CommandModule.bsl");
			КонецЕсли;
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["МодульНабораЗаписей"] Тогда
			ПутьКМодулю = ОбъединитьПути(Модуль.ПутьКОбъекту, "RecordSetModule.bsl");
		ИначеЕсли Модуль.ИдТипаМодуля = ТипыМодулей["НеизвестныйМодуль"] Тогда
			Лог.Ошибка("Not implemented exception"); // TODO
		Иначе
			Лог.Отладка("Неизвестный идентификатор типа модуля " + Модуль.ИдТипаМодуля);
		КонецЕсли;

		ПутьКМодулю = ОбъединитьПути(ПутьКИсходномуКоду, ПутьКМодулю);
		ПутьКМодулю = СтрЗаменить(ПутьКМодулю, "\", "/");
		Модуль.ПутьКМодулю = ПутьКМодулю;
		
	КонецЦикла;

КонецПроцедуры

Функция ВыделитьОбъектМетаданныхXML(ПутьКФайлу)

	ПроцессорXML = Новый СериализацияДанныхXML;
	РезультатЧтенияXML = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлу);

	УзелОбъявленияМетаданного = РезультатЧтенияXML["MetaDataObject"];
	Если УзелОбъявленияМетаданного = Неопределено Тогда
		Лог.Отладка("Не удалось определить узел объекта метаданных (" + ПутьКФайлу + ")");
		Возврат Неопределено;
	КонецЕсли;

	ОбъектМетаданных = ПолучитьОбъектМетаданныхXML(УзелОбъявленияМетаданного);

	Возврат ОбъектМетаданных;

КонецФункции

Функция ВыделитьОбъектМетаданныхEDT(ПутьКФайлу)

	ПроцессорXML = Новый СериализацияДанныхXML;
	РезультатЧтенияXML = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлу);

	ОбъектМетаданных = ПолучитьОбъектМетаданныхEDT(РезультатЧтенияXML);

	Возврат ОбъектМетаданных;

КонецФункции

Функция ПолучитьОбъектМетаданныхXML(УзелОбъявленияМетаданного)

	ОбъектМетаданных = Неопределено;

	Для Каждого ВидОбъектаМетаданных Из ВидыОбъектовМетаданныхСМодулями Цикл

		ОбъектМетаданных = УзелОбъявленияМетаданного._Элементы[ВидОбъектаМетаданных];

		Если ОбъектМетаданных <> Неопределено Тогда
			Возврат ОбъектМетаданных;
		КонецЕсли;

	КонецЦикла;

	Возврат ОбъектМетаданных;

КонецФункции

Функция ПолучитьОбъектМетаданныхEDT(УзелОбъявленияМетаданного)

	ОбъектМетаданных = Неопределено;

	Для Каждого ВидОбъектаМетаданных Из ВидыОбъектовМетаданныхСМодулями Цикл

		ОбъектМетаданных = УзелОбъявленияМетаданного[ВидОбъектаМетаданных];

		Если ОбъектМетаданных <> Неопределено Тогда
			Возврат ОбъектМетаданных;
		КонецЕсли;

	КонецЦикла;

	Возврат ОбъектМетаданных;

КонецФункции

Функция ОпределитьUUIDОбъекта(ОбъектМетаданных)

	UUIDОбъекта =  ОбъектМетаданных._Атрибуты["uuid"];

	Если UUIDОбъекта = Неопределено Тогда
		Лог.Ошибка("Не удалось определить uuid (" + ОбъектМетаданных + ")");
	КонецЕсли;

	Возврат UUIDОбъекта;

КонецФункции

Процедура ЗаписатьОбъектВДанныеПокрытия(UUID, ИдТипаМодуля, ПутьКОбъекту, ИмяКоманды = "", ИмяФормы = "")

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИдОбъекта", UUID);
	СтруктураОтбора.Вставить("ИдТипаМодуля", ИдТипаМодуля);

	НайденныеСтроки = ДанныеПокрытия.НайтиСтроки(СтруктураОтбора);

	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаДанныхПокрытия = НайденныеСтроки[0];

		Лог.Отладка("Обнаружен замер в объекте " + UUID + " (" + ПутьКОбъекту + ")");
	
		СтрокаДанныхПокрытия.ПутьКОбъекту = ПутьКОбъекту;
		СтрокаДанныхПокрытия.ИмяКоманды = ИмяКоманды;
		СтрокаДанныхПокрытия.ИмяФормы = ИмяФормы;
	
	ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
		Лог.Отладка("В объекте " + UUID + " замеров не обнаружено");
	Иначе
		ВызватьИсключение("Ошибка формирования данных покрытия");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьКомандыОбъектаXML(ОбъектМетаданных, ПутьКОбъекту)
	
	ЭлементыУзлаОбъектМетаданных = ОбъектМетаданных._Элементы;
	ТипЗнчЭлементыУзла = ТипЗнч(ЭлементыУзлаОбъектМетаданных);
	
	ДочерниеОбъекты = Неопределено;
	Если ТипЗнчЭлементыУзла = Тип("Соответствие") Тогда
		
		ДочерниеОбъекты = ЭлементыУзлаОбъектМетаданных["ChildObjects"];
		
	ИначеЕсли ТипЗнчЭлементыУзла = Тип("Массив") Тогда
		
		Для Каждого Элемент Из ЭлементыУзлаОбъектМетаданных Цикл
			ДочерниеОбъекты = Элемент["ChildObjects"];
			
			Если ДочерниеОбъекты <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Лог.Отладка("Поведение не определено");
	КонецЕсли;
	
	Если ДочерниеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДочернийОбъект Из ДочерниеОбъекты Цикл
		
		Если ТипЗнч(ДочернийОбъект) <> Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;

		Команда = ДочернийОбъект["Command"];
		
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		UUIDКоманды = Команда._Атрибуты["uuid"];
		ИмяКоманды = Команда._Элементы["Properties"]["Name"];
		ЗаписатьОбъектВДанныеПокрытия(UUIDКоманды, "", ПутьКОбъекту);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьКомандыОбъектаEDT(ОбъектМетаданных, ПутьКОбъекту)
	
	ЭлементыУзлаОбъектМетаданных = ОбъектМетаданных._Элементы;
	ТипЗнчЭлементыУзла = ТипЗнч(ЭлементыУзлаОбъектМетаданных);

	ДочерниеОбъекты = Неопределено;
	Если ТипЗнчЭлементыУзла = Тип("Соответствие") Тогда
		
		Команда = ЭлементыУзлаОбъектМетаданных["commands"];

		Если Команда <> Неопределено Тогда
			UUIDКоманды = Команда._Атрибуты["uuid"];
			ИмяКоманды = Команда._Элементы["name"];
			ЗаписатьОбъектВДанныеПокрытия(UUIDКоманды, "", ПутьКОбъекту, ИмяКоманды);
		КонецЕсли;

		Форма = ЭлементыУзлаОбъектМетаданных["forms"];

		Если Форма <> Неопределено Тогда
			UUIDФормы = Форма._Атрибуты["uuid"];
			ИмяФормы = ОпределитьИмяФормы(Форма);
			ЗаписатьОбъектВДанныеПокрытия(UUIDФормы, "", ПутьКОбъекту, , ИмяФормы);
		КонецЕсли;
		
	ИначеЕсли ТипЗнчЭлементыУзла = Тип("Массив") Тогда
		
		Для Каждого Элемент Из ЭлементыУзлаОбъектМетаданных Цикл
			
			Команда = Элемент["commands"];

			Если Команда <> Неопределено Тогда
				UUIDКоманды = Команда._Атрибуты["uuid"];
				ИмяКоманды = Команда._Элементы["name"];
				ЗаписатьОбъектВДанныеПокрытия(UUIDКоманды, "", ПутьКОбъекту, ИмяКоманды);
			КонецЕсли;

			Форма = Элемент["forms"];

			Если Форма <> Неопределено Тогда
				
				UUIDФормы = Форма._Атрибуты["uuid"];
				ИмяФормы = ОпределитьИмяФормы(Форма);
				ЗаписатьОбъектВДанныеПокрытия(UUIDФормы, "", ПутьКОбъекту, , ИмяФормы);

			КонецЕсли;

		КонецЦикла;
		
	Иначе
		Лог.Отладка("Поведение не определено");
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьИмяФормы(Форма)

	ИмяФормы = "";

	Для Каждого Элемент Из Форма._Элементы Цикл

		ИмяФормы = Элемент["name"];
		Если ЗначениеЗаполнено(ИмяФормы) Тогда

			Возврат ИмяФормы;

		КонецЕсли;

	КонецЦикла;

	Возврат ИмяФормы;

КонецФункции

Функция ВидыОбъектовМетаданныхСМодулями()

	ВидыОбъектовМетаданных = Новый Массив();

	ВидыОбъектовМетаданных.Добавить("Configuration");
	ВидыОбъектовМетаданных.Добавить("AccumulationRegister");
	ВидыОбъектовМетаданных.Добавить("Catalog");
	ВидыОбъектовМетаданных.Добавить("Form");
	ВидыОбъектовМетаданных.Добавить("CommonCommand");
	ВидыОбъектовМетаданных.Добавить("CommonForm");
	ВидыОбъектовМетаданных.Добавить("CommonModule");
	ВидыОбъектовМетаданных.Добавить("DocumentJournal");
	ВидыОбъектовМетаданных.Добавить("Document");
	ВидыОбъектовМетаданных.Добавить("HTTPService");
	ВидыОбъектовМетаданных.Добавить("Report");
	ВидыОбъектовМетаданных.Добавить("WebService");

	Возврат ВидыОбъектовМетаданных;

КонецФункции

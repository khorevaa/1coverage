#Использовать fs
#Использовать ParserFileV8i

Перем Лог;

Функция ОпределитьИдИБ(Знач СтрокаСоединенияСИБ) Экспорт

	ИдИнформационнойБазы = "";

	НормализоватьСтрокуСоединенияСИБ(СтрокаСоединенияСИБ);
	
	ИдИнформационнойБазы = ОпределитьИдЗарегистрированнойИБ(СтрокаСоединенияСИБ);

	Если Не ЗначениеЗаполнено(ИдИнформационнойБазы) Тогда

		ИдИнформационнойБазы = ОпределитьИдНезарегистрированнойИБ(СтрокаСоединенияСИБ);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИдИнформационнойБазы) Тогда
		ВызватьИсключение("Не удалось определить Ид информационной базы " + СтрокаСоединенияСИБ);
	КонецЕсли;

	Возврат ИдИнформационнойБазы;

КонецФункции

Процедура НормализоватьСтрокуСоединенияСИБ(СтрокаСоединенияСИБ)

	Если Не ЗначениеЗаполнено(СтрокаСоединенияСИБ) Тогда
		ВызватьИсключение("Не указана строка соединения с ИБ");
	КонецЕсли;

	ТипИБ = Лев(СтрокаСоединенияСИБ, 2);

	Если ТипИБ = "/F" Тогда
		
		СтрокаСоединенияСИБ = Сред(СтрокаСоединенияСИБ, 3);
		СтрокаСоединенияСИБ = ФС.ПолныйПуть(СтрокаСоединенияСИБ);
	
	ИначеЕсли ТипИБ = "/S" Тогда

		СтрокаСоединенияСИБ = Сред(СтрокаСоединенияСИБ, 3);
		СтрокаСоединенияСИБ = СтрЗаменить(СтрокаСоединенияСИБ, "\", ":");

	Иначе

		ВызватьИсключение("Некорректно указан тип базы в строке соединения, ожидалось /F или /S");

	КонецЕсли;

КонецПроцедуры

Функция ОпределитьИдЗарегистрированнойИБ(СтрокаСоединенияСИБ)

	ИдИнформационнойБазы = "";
	
	Лог.Отладка("Поиск ИБ "+ СтрокаСоединенияСИБ + " в файле ibases.v8i");
	
	Парсер = Новый ПарсерСпискаБаз;
	СписокИБ = Парсер.НайтиПоПути(СтрокаСоединенияСИБ);

	Если ТипЗнч(СписокИБ) = Тип("Структура") Тогда
		ИдИнформационнойБазы = СписокИБ.ID;
		Лог.Отладка("ИБ "+ СтрокаСоединенияСИБ + " найдена в файле ibases.v8i с Ид=" + ИдИнформационнойБазы);
	Иначе
		Лог.Отладка("ИБ "+ СтрокаСоединенияСИБ + " не найдена в файле ibases.v8i");
	КонецЕсли;

	Возврат ИдИнформационнойБазы;

КонецФункции

Функция ОпределитьИдНезарегистрированнойИБ(СтрокаСоединенияСИБ)

	ИдИнформационнойБазы = "";

	КаталогНастроек1С = ПолучитьКаталогНастроек1СТекущегоПользователя();
	ИмяФайлаНастроек = ОбъединитьПути(КаталогНастроек1С, "1cv8u.pfl");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаНастроек, КодировкаТекста.UTF8);
	СписокИБ = ТекстовыйДокумент.ПолучитьТекст();

	СтрокаСоединенияСИБЭкран = СтрЗаменить(СтрокаСоединенияСИБ, "\", "\\");

	РегВыражение = Новый РегулярноеВыражение(СтрокаСоединенияСИБЭкран + ".*\n.*(\w{8}-\w{4}-\w{4}-\w{4}-\w{12}).*");
	Совпадения = РегВыражение.НайтиСовпадения(СписокИБ);

	Если Совпадения.Количество() = 0 Тогда
		Возврат ИдИнформационнойБазы;
	КонецЕсли;

	ИдИнформационнойБазы = Совпадения[0]["Группы"][1].Значение;

	Возврат ИдИнформационнойБазы;

КонецФункции

Процедура ЗаменитьФайлСНастройкамиОтладкиДляБазы(Знач ИдИнформационнойБазы, Знач ПроксиХост, Знач ПроксиПорт) Экспорт

	ИмяФайлаНастроек = ПолучитьИмяФайлаНастроек(ИдИнформационнойБазы);

	Если Не ФС.ФайлСуществует(ИмяФайлаНастроек) Тогда
		Текст = Новый ТекстовыйДокумент; 
		Текст.Записать(ИмяФайлаНастроек);
	КонецЕсли;
	
	ПутьКФайлуШаблон = ОбъединитьПути(ПараметрыПриложения.КаталогПроекта, "fixtures", "1cv8.pfl");
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуШаблон);
	СодержимоеФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	СодержимоеФайла = СтрЗаменить(СодержимоеФайла, "%1COVERAGE_PROXY_HOST%", ПроксиХост);
	СодержимоеФайла = СтрЗаменить(СодержимоеФайла, "%1COVERAGE_PROXY_PORT%", ПроксиПорт);

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаНастроек);
	ЗаписьТекста.Записать(СодержимоеФайла);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

Функция ПолучитьИмяФайлаНастроек(Знач ИдИнформационнойБазы)

	КаталогНастроек1СТекПользователь = ПолучитьКаталогНастроек1СТекущегоПользователя();
	КаталогФайлаНастроек = ОбъединитьПути(КаталогНастроек1СТекПользователь, ИдИнформационнойБазы);
	ФС.ОбеспечитьКаталог(КаталогФайлаНастроек);

	ИмяФайлаНастроек = ОбъединитьПути(КаталогФайлаНастроек, "1cv8.pfl");

	Возврат ИмяФайлаНастроек;

КонецФункции

Функция ПолучитьКаталогФайлаНастроекИБ(Знач ИдИнформационнойБазы) Экспорт

	КаталогНастроек1СТекПользователь = ПолучитьКаталогНастроек1СТекущегоПользователя();
	КаталогФайлаНастроек = ОбъединитьПути(КаталогНастроек1СТекПользователь, ИдИнформационнойБазы);

	Возврат КаталогФайлаНастроек;

КонецФункции

Функция ПолучитьКаталогНастроек1СТекущегоПользователя()

	APPDATA = ПолучитьПеременнуюСреды("APPDATA");
	КаталогФайлаНастроек = ОбъединитьПути(APPDATA, "1C", "1cv8");
	
	Возврат КаталогФайлаНастроек;

КонецФункции

Процедура Инициализация()
	
	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры	

Инициализация();

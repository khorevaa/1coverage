#Использовать "../src/1coverage"

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;
	
	ИменаТестов = Новый Массив;
	
	ИменаТестов.Добавить("ТестДолжен_ОпределитьОбъектыКонфигурацииXML");
	ИменаТестов.Добавить("ТестДолжен_ОпределитьОбъектыКонфигурацииEDT");
	
	Возврат ИменаТестов;

КонецФункции

Процедура ТестДолжен_ОпределитьОбъектыКонфигурацииXML() Экспорт
	
	ПутьКЛогамПрокси = ОбъединитьПути(ПараметрыПриложения.КаталогПроекта, "tests", "fixtures", "dbgs-log");
	
	ОбработчикЛоговПрокси = Новый ОбработчикЛоговПрокси(ПутьКЛогамПрокси);
	ДанныеЗамеров = ОбработчикЛоговПрокси.ОбработатьЛоги();

	ОбработчикДанныхЗамеров = Новый ОбработчикДанныхЗамеров(ДанныеЗамеров);
	ДанныеПокрытия = ОбработчикДанныхЗамеров.ЗаполнитьДанныеПокрытия();

	ПутьКИсходномуКоду = ОбъединитьПути(ПараметрыПриложения.КаталогПроекта, "tests", "fixtures", "cf-xml");
	
	ОбработчикДанныхПокрытия = Новый ОбработчикДанныхПокрытия(ПутьКИсходномуКоду);
	ОбработчикДанныхПокрытия.ЗаполнитьДанныеПокрытия(ДанныеПокрытия);

	Результат = СериализоватьДанныеПокрытияВСтроку(ДанныеПокрытия);

	Эталон = ПолучитьЭталонXML();
	
	Ожидаем.Что(Результат, "").Равно(Эталон);

	ПроверитьНаличиеФайлов(ПутьКИсходномуКоду, ДанныеПокрытия);

КонецПроцедуры

Процедура ТестДолжен_ОпределитьОбъектыКонфигурацииEDT() Экспорт
	
	ПутьКЛогамПрокси = ОбъединитьПути(ПараметрыПриложения.КаталогПроекта, "tests", "fixtures", "dbgs-log");
	
	ОбработчикЛоговПрокси = Новый ОбработчикЛоговПрокси(ПутьКЛогамПрокси);
	ДанныеЗамеров = ОбработчикЛоговПрокси.ОбработатьЛоги();

	ОбработчикДанныхЗамеров = Новый ОбработчикДанныхЗамеров(ДанныеЗамеров);
	ДанныеПокрытия = ОбработчикДанныхЗамеров.ЗаполнитьДанныеПокрытия();

	ПутьКИсходномуКоду = ОбъединитьПути(ПараметрыПриложения.КаталогПроекта, "tests", "fixtures", "cf-edt");
	
	ОбработчикДанныхПокрытия = Новый ОбработчикДанныхПокрытия(ПутьКИсходномуКоду);
	ОбработчикДанныхПокрытия.ЗаполнитьДанныеПокрытия(ДанныеПокрытия);

	Результат = СериализоватьДанныеПокрытияВСтроку(ДанныеПокрытия);

	Эталон = ПолучитьЭталонEDT();
	
	// Ожидаем.Что(Результат, "").Равно(Эталон);

	ПроверитьНаличиеФайлов(ПутьКИсходномуКоду, ДанныеПокрытия);

КонецПроцедуры

Функция СериализоватьДанныеПокрытияВСтроку(ДанныеПокрытия)

	Результат = "";
	Для Каждого Стр Из ДанныеПокрытия Цикл

		Результат = Результат +
		Стр.ИдОбъекта + "|" +
		Стр.ИдТипаМодуля + "|" +
		Стр.ПутьКМодулю + "|" +
		Символы.ПС;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьЭталонEDT()

	Возврат "f304fb62-52f8-44bc-acdb-d0bfd45a4028|d1b64a2c-8078-4982-8190-8f81aefda192|.\AccumulationRegisters\РегистрНакопления1\Ext\ManagerModule.bsl|
	|04132787-f61a-41c5-b2fc-949ba4f6c45a|32e087ab-1491-49b6-aba7-43571b41ac2b|.\Documents\Документ1\Forms\ФормаДокумента\Ext\Form\Module.bsl|
	|07872757-43e2-4b3f-8a6a-2bf4b4e05462|078a6af8-d22c-4248-9c33-7e90075a3d2c|.\CommonCommands\ОбщаяКоманда1\Ext\CommandModule.bsl|
	|50c2fc3a-75fe-4bf9-a867-6f37bfda3c5c|32e087ab-1491-49b6-aba7-43571b41ac2b|.\Reports\Отчет1\Forms\ФормаОтчета\Ext\Form\Module.bsl|
	|b7308561-8675-4a9c-bd27-30b65260e8db|a637f77f-3840-441d-a1c3-699c8c5cb7e0|.\Reports\Отчет1\Ext\ObjectModule.bsl|
	|4fcb6ccc-1fc4-44b0-89de-e91fd6840511|32e087ab-1491-49b6-aba7-43571b41ac2b|.\Catalogs\Справочник1\Forms\ФормаЭлемента\Ext\Form\Module.bsl|
	|8579e6d0-6ef5-4b64-8b17-7f666004b239|a637f77f-3840-441d-a1c3-699c8c5cb7e0|.\Catalogs\Справочник1\Ext\ObjectModule.bsl|
	|1e2790f1-29a8-4f99-ae2d-625a683ec086|d5963243-262e-4398-b4d7-fb16d06484f6|.\CommonModules\ОбщийМодуль1\Ext\Module.bsl|
	|";

КонецФункции

Функция ПолучитьЭталонXML()

	Возврат "f304fb62-52f8-44bc-acdb-d0bfd45a4028|d1b64a2c-8078-4982-8190-8f81aefda192|AccumulationRegisters/РегистрНакопления1/Ext/ManagerModule.bsl|
	|04132787-f61a-41c5-b2fc-949ba4f6c45a|32e087ab-1491-49b6-aba7-43571b41ac2b|Documents/Документ1/Forms/ФормаДокумента/Ext/Form/Module.bsl|
	|07872757-43e2-4b3f-8a6a-2bf4b4e05462|078a6af8-d22c-4248-9c33-7e90075a3d2c|CommonCommands/ОбщаяКоманда1/Ext/CommandModule.bsl|
	|50c2fc3a-75fe-4bf9-a867-6f37bfda3c5c|32e087ab-1491-49b6-aba7-43571b41ac2b|Reports/Отчет1/Forms/ФормаОтчета/Ext/Form/Module.bsl|
	|b7308561-8675-4a9c-bd27-30b65260e8db|a637f77f-3840-441d-a1c3-699c8c5cb7e0|Reports/Отчет1/Ext/ObjectModule.bsl|
	|4fcb6ccc-1fc4-44b0-89de-e91fd6840511|32e087ab-1491-49b6-aba7-43571b41ac2b|Catalogs/Справочник1/Forms/ФормаЭлемента/Ext/Form/Module.bsl|
	|8579e6d0-6ef5-4b64-8b17-7f666004b239|a637f77f-3840-441d-a1c3-699c8c5cb7e0|Catalogs/Справочник1/Ext/ObjectModule.bsl|
	|1e2790f1-29a8-4f99-ae2d-625a683ec086|d5963243-262e-4398-b4d7-fb16d06484f6|CommonModules/ОбщийМодуль1/Ext/Module.bsl|
	|";

КонецФункции
Процедура ПроверитьНаличиеФайлов(ПутьКИсходномуКоду, ДанныеПокрытия)

	Для Каждого Модуль Из ДанныеПокрытия Цикл

		ПолныйПутьКМодулю = ОбъединитьПути(ПутьКИсходномуКоду, Модуль.ПутьКМодулю);

		Файл = Новый Файл(ПолныйПутьКМодулю);
		ФайлСуществует = Файл.Существует();
		Ожидаем.Что(ФайлСуществует, "Путь к модулю построен некорректно (" + ПолныйПутьКМодулю + ")").Равно(Истина);

	КонецЦикла;

КонецПроцедуры

Лог = ПараметрыПриложения.Лог();
